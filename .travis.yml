language: python

os:
  - linux
  - osx

matrix:
  include:

    - os: linux
      dist: xenial
      python:
        - "3.4"
        - "3.7"

    - os: osx
      language: generic
      env: PYTHON=3.4.4

    - os: osx
      language: generic
      env: PYTHON=3.7.3

addons:
  apt:
    packages:
      - curl
      - build-essential
  homebrew:
    packages:
      - npm

services:
  - mongodb

before_install:

  - |
  if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    echo "Python workaround for OSX. This installs Python."
    brew update
    # Per the `pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>`_.
    brew install openssl readline
    # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
    # I didn't do this above because it works and I'm lazy.
    brew outdated pyenv || brew upgrade pyenv
    # virtualenv doesn't work without pyenv knowledge. venv in Python 3.3
    # doesn't provide Pip by default. So, use `pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>`_.
    brew install pyenv-virtualenv
    pyenv install $PYTHON
    # I would expect something like ``pyenv init; pyenv local $PYTHON`` or
    # ``pyenv shell $PYTHON`` would work, but ``pyenv init`` doesn't seem to
    # modify the Bash environment. ??? So, I hand-set the variables instead.
    export PYENV_VERSION=$PYTHON
    export PATH="/Users/travis/.pyenv/shims:${PATH}"
    pyenv-virtualenv venv
    source venv/bin/activate
    # A manual check that the correct version of Python is running.
    python --version
  fi



  - echo "Decrypting twitter API keys..."
  - openssl aes-256-cbc -K $encrypted_79c27a32ce79_key -iv $encrypted_79c27a32ce79_iv
    -in secrets.json.enc -out ~/secrets.json -d

  - echo "Installing npm..."
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
      sudo apt-get install -y nodejs
    fi

script:

  - echo "I am script!"

  - pushd coding

  - echo "Testing twitter fire scraper"
  - pushd twitter-fire-scraper
  - ruby build.rb
  - ruby test-localwheel-install.rb
  - popd

  - echo "Testing twitter fire scraper web API"
  - pushd twitter-fire-scraper-webapi
  - ruby build.rb
  - ruby test-localwheel-install.rb
  - popd

  - echo "twitter-fire-scraper-dashboard"

  - echo "Starting up Web API..."
  - pushd twitter-fire-scraper-webapi
  - pipenv run pip install pip==18.0
  - pipenv install

  - |
    pipenv run python src/twitter_fire_scraper_webapi/app.py 2> /tmp/flask.error.log > /tmp/flask.log &
    FLASK_PID=$!
    sleep 30

  - echo PID of flask web server is ${FLASK_PID}
  - curl -v 127.0.0.1:3620
  - popd

  - echo "Starting dashboard..."
  - pushd twitter-fire-scraper-dashboard/TwitterFireScraperDashboard/TwitterFireScraperDashboard
  - npm install
  - npm run build

  - |
    npm run serve 2> /tmp/node.error.log > /tmp/node.log &
    NPM_PID=$!
    sleep 30

  - echo PID of node web server is ${NPM_PID}
  - curl -v localhost:3000
  - popd

  - popd

after_failure:

  - echo "Log of twitter-fire-scraper-webapi:"
  - cat /tmp/flask.log

  - echo "Error log of twitter-fire-scraper-webapi:"
  - cat /tmp/flask.error.log


  - echo "Log of twitter-fire-scraper-dashboard:"
  - cat /tmp/node.log

  - echo "Error log of twitter-fire-scraper-dashboard:"
  - cat /tmp/node.error.log